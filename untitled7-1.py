# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qWuR2vMKzM2u1PjudJErQ3Fz7L6hwiO
"""

# імпортувати та побудувати лінійний регресор з параметрами за замовчанням
from sklearn.linear_model import ...
lr = ...

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

# імпортувати крос-валідатор 'cross_validate' з модуля 'model_selection'

from sklearn.model_selection import cross_validate

# імпортувати ridge-регресор з модуля `sklearn.linear_model`
...

# побудувати регресор
ridge = Ridge(...)

from sklearn.linear_model import Ridge

# побудова регресора з параметрами за замовчуванням
ridge = Ridge(alpha=1.0)

# імпортувати сітку пошуку `GridSearchCV` з модулю sklearn.model_selection
...

# визначити параметр равномірного пошуку 100 значень параметеру `alpha` в диапазоні 0-100000 
grid_params = { ... }

from sklearn.model_selection import GridSearchCV

# визначити параметр равномірного пошуку 100 значень параметеру `alpha` в диапазоні 0-100000 
grid_params = {'alpha': np.linspace(0, 100000, 100)}

# використати крос-валідацію з 10 сплітами та r2 як метрику якості
grid = GridSearchCV(estimator=Ridge(), param_grid=grid_params, cv=10, scoring='r2')

# вивести найкращій естіматор (best_estimator_), та найкраще значення обраної метрики (best_score_)

print("Best estimator:", grid_search_model.best_estimator_)
print("Best score:", grid_search_model.best_score_)

# імпортувати модуль preprocessing.PolynomialFeatures
from sklearn.preprocessing import PolynomialFeatures

# побудувати трансформер ступеня 2 для побудови додаткових ознак в датасеті
poly = ...

from sklearn.preprocessing import PolynomialFeatures

# створити трансформер ступеня 2
poly = PolynomialFeatures(degree=2)

# визначити імена відібраних показчиків
poly_features_names = poly.get_feature_names_out()

poly_features_names = poly.get_feature_names_out() + list(data.columns)

