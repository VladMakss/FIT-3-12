# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qWuR2vMKzM2u1PjudJErQ3Fz7L6hwiO
"""

# відокремити від робочого датасету колонку з цільовим показчиком (`Price`) 
# та вилучити її з обробки
target =...
...

target = data_poly.pop('Price')

data_processed = data_poly.drop('Price', axis=1)

# імпортувати з sklearn модуль, що відповідає за селективний відбір покажчиків
from sklearn.compose import ...

`ColumnTransformer`

# побудувати  селектори для вібіру числових та категоріальних колонок
numeric_selector = ...
category_selector = ...

from sklearn.compose import make_column_selector, make_column_transformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder

# Селектор для відбору числових колонок
numeric_selector = make_column_selector(dtype_include=np.number)

# Селектор для відбору категоріальних колонок
category_selector = make_column_selector(dtype_exclude=np.number)

# Створення пайплайну для трансформації колонок
preprocessor = make_column_transformer(
    (StandardScaler(), numeric_selector),
    (OneHotEncoder(), category_selector)
)

# застосувати побудовані селектори для створення списків числових та категоріальних показчиків
numeric_data_columns = ...
category_data_columns = ...

print(f'список числових покажчиків = {numeric_data_columns}')
print(f'список категоріальних покажчиків = {category_data_columns}')

from sklearn.compose import make_column_selector

numeric_selector = make_column_selector(dtype_include=np.number)
category_selector = make_column_selector(dtype_include=object)

numeric_data_columns = numeric_selector(data)
category_data_columns = category_selector(data)

print(f'список числових покажчиків = {numeric_data_columns}')
print(f'список категоріальних покажчиків = {category_data_columns}')

# створити 2 окремі датасети: числовий та категоріальний та вивести їх основні властивості
data_numeric = ...
data_category = ...

data_numeric.shape, data_category.shape

# визначаємо список числових та категоріальних показчиків
numeric_data_columns = [...]  # список назв числових колонок
category_data_columns = [...]  # список назв категоріальних колонок

# розділяємо робочий датасет на два окремих датасети: числовий та категоріальний
data_numeric = data[numeric_data_columns]
data_category = data[category_data_columns]

# виводимо властивості датасетів
print(f"Розмір числового датасету: {data_numeric.shape}")
print(f"Розмір категоріального датасету: {data_category.shape}")

# з модуля `preprocessing` імпортувати нормалізатор 'MinMaxScaler' та стандартизатор 'StandardScaler'

from sklearn.preprocessing import MinMaxScaler, StandardScaler

# створити відповідні маштабувачі
standart_scaler = ...
min_max_scaler = ...

from sklearn.preprocessing import StandardScaler, MinMaxScaler

# Create a StandardScaler object
standart_scaler = StandardScaler()

# Create a MinMaxScaler object
min_max_scaler = MinMaxScaler()

# побудувати змаштабовані датасети за двома стратегіями: стандартизація та нормалізація
data_numeric_std = ...
data_numeric_min_max= ...

# побудувати змаштабовані датасети за двома стратегіями: стандартизація та нормалізація
data_numeric_std = pd.DataFrame(standart_scaler.fit_transform(data_numeric), columns=data_numeric.columns)
data_numeric_min_max = pd.DataFrame(min_max_scaler.fit_transform(data_numeric), columns=data_numeric.columns)

# з модуля `preporcessing` імпортувати кодувальники 'OrdinalEncoder' та 'OneHotEncoder

from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder

# створити енкодери та закодувати ними відповідні категоріальні колонки
ordinal_encoder = ...
one_hot_encoder = ...

# вивести унікальні значення та їх кількість в кожній категоріальній колонці
for column in data_category.columns:
    print(column)
    print(data_category[column].unique())
    print(data_category[column].nunique())
    print()

# з модуля `compose` імпортувати трансформер колонок `ColumnTransformer`

from sklearn.compose import ColumnTransformer